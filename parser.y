/* This block of code will go into the header file generated by bison */
%code requires{
   #include <memory>
   #include <string>

 struct Node
 {
    std::string val;
    Node* left;
    Node* right;
    Node(){
      left = right = nullptr;
    }
 };


   // #define YYSTYPE std::shared_ptr<Node>
}


/* calculator. */
%{
 #include <stdio.h>
 #include <stdlib.h>
 #include <memory>
 #include <string>
 #include <iostream>
 #include "lexer.h"
 void yyerror(const char *msg);

 using namespace std;
 struct Node;
 Node* root = nullptr;

%}

%union{
   Node* node;
}

%error-verbose
%locations

%start input
%token NONDIGIT DIGIT Identifier DOT L_SQ R_SQ NEWLINE END
%type <node> exp memberexp
%type <node> Identifier
%type <node> input
%type <node> bolck
%type <node> DOT
%type <node> L_SQ
%type <node> DIGIT
%left DOT L_SQ
%nonassoc UMINUS


%% 
input:	bolck

			;

bolck: exp END
{
   $$ = $1;
}
;

exp:
			// exp DOT exp
         exp memberexp        
         { 
            $2->left = $1; 
            // $2->right = $3; 
            $$ = $2;
            root = $$;
         }
			| exp L_SQ exp R_SQ      
         { 
            $2->left = $1; 
            $2->right = $3; 
            $$ = $2;
            root = $$;
         }
         | Identifier                
         { 
            $$ = $1; 
         }
         | DIGIT
         {
            $$ = $1; 
         }
			;

memberexp:
   DOT Identifier { $$ = new Node(); $$->val = "MemberExp:" "." + std::string(yytext); }
   ;
%%
   
 #include <list>
std::list<int> gFullTree;
void printnode(Node* node, int dep = 0, bool bc = false)
{
  if (node)
  {
    std::string wd(dep * 2, ' ');
    if (dep > 0)
    {
      if (1)
      {
         for (auto i : gFullTree)
         {
            wd[i * 2] = '|';
         }
      }
      if (!bc)
         wd[dep * 2 - 2] = '|';
      else
         wd[dep * 2 - 2] = '`';
      wd[dep * 2 - 1] = '-';
    }
    if (node->left && node->right)
    {
      gFullTree.push_back(dep);
    }
    std::cout << wd << "'" << node->val << '\'' << std::endl;
    printnode(node->left, dep+1, node->right == nullptr);
    if (node->left && node->right)
    {
      gFullTree.pop_back();
    }
    printnode(node->right, dep+1, true);
    
  }
  else
  {
    //std::cout << "nullptr" << std::endl;
  }

}

int main(int argc, char **argv) {
   if (argc > 1) {
      yyin = fopen(argv[1], "r");
      if (yyin == NULL){
         printf("syntax: %s filename\n", argv[0]);
      }//end if
   }//end if
   yyparse(); // Calls yylex() for tokens.
   printnode(root);
   return 0;
}

void yyerror(const char *msg) {
   printf("** Line %d: %s\n", yylloc.first_line, msg);
}
